 %%[
/*
Parent Business Unit > Web Studio > CloudPages > subscriptionManagement > TEST_unsubscribeViaEmail
TEST URL https://mc0bmzwqk1238gd2xpbvbcx6t5gy.pub.sfmc-content.com/ggzp1devcn5
Parent Business Unit > Web Studio > CloudPages > subscriptionManagement > LIVE_unsubscribeViaEmail
LIVE URL https://mc0bmzwqk1238gd2xpbvbcx6t5gy.pub.sfmc-content.com/5rhswpjmrmx
*/
SET @parentBU = "536001490"

/*
SET @environment = "test"
*/

SET @accountId = Requestparameter("accountId")
SET @email = Requestparameter("email")
SET @subscriberKey = Requestparameter("subscriberKey")
SET @sourceCategory = Requestparameter("sourceCategory")
SET @source = Requestparameter("source")
SET @permissionType = Requestparameter("permissionType")
SET @channel = "email"
SET @jobId = Requestparameter("jid")
SET @listId = Requestparameter("lid")
SET @batchId = Requestparameter("bid")
SET @locale = Requestparameter("locale")
SET @allSubscribers = "_Subscribers"
SET @cxConfigDE = "cxConfig"
SET @cxSwitcherDE = "cxSwitcher"

SET @pw = Lookup(@cxConfigDE,"parameterValue","parameterContext",@parentBU,"parameterName","EncryptionPW_KEY")
SET @salt = Lookup(@cxConfigDE,"parameterValue","parameterContext",@parentBU,"parameterName","EncryptionSalt_KEY")
SET @IV = Lookup(@cxConfigDE,"parameterValue","parameterContext",@parentBU,"parameterName","EncryptionIV_KEY")

/* start decrypt accountId */
IF NOT EMPTY(@accountId) THEN
  SET @accountId = DecryptSymmetric(@accountId, 'AES', @pw, @null, @salt, @null, @IV, @null)
  SET @debugMessage = "parameters received"
ELSE
  SET @debugMessage = "no parameters received"
ENDIF
/* end decrypt accountId */


IF @accountId != @parentBU THEN
  SET @cxConfigDE = concat("ENT.",@cxConfigDE)
  SET @cxSwitcherDE = concat("ENT.",@cxSwitcherDE)
  SET @allSubscribers = concat("ENT.",@allSubscribers)
ENDIF

SET @permissionsDE = Lookup(@cxConfigDE,"parameterValue","parameterContext",@parentBU,"parameterName","permissionsDE")
SET @permissionsDefinitionDE = Lookup(@cxConfigDE,"parameterValue","parameterContext",@parentBU,"parameterName","permissionsDefinitionDE")
SET @subscriptionArchiveDE = Lookup(@cxConfigDE,"parameterValue","parameterContext",@parentBU,"parameterName","subscriptionArchiveDE")
SET @unsubLogDe = Lookup(@cxConfigDE,"parameterValue","parameterContext",@parentBU,"parameterName","unsubLogDE")
SET @genericErrorPage = Lookup(@cxConfigDE,"parameterValue","parameterContext",@parentBU,"parameterName","genericErrorPage")

IF @accountId != @parentBU THEN
  SET @permissionsDefinitionDE = concat("ENT.",@permissionsDefinitionDE)
  SET @permissionsDE = concat("ENT.",@permissionsDE)
  SET @subscriptionArchiveDE = concat("ENT.",@subscriptionArchiveDE)
  SET @unsubLogDe = concat("ENT.",@unsubLogDe)
ENDIF

/* define suppression list */
SET @locationForSuppressions = Lookup(@permissionsDefinitionDE,"locationForSuppressions","accountId",@accountId,"permissionType",@permissionType,"channel",@channel)

/* child context, define defaults */
SET @defaultSourceCategory = Lookup(@cxConfigDE,"parameterValue","parameterContext",@accountId,"parameterName","defaultSourceCategoryEmailunsub")
IF empty(@sourceCategory) THEN
  SET @sourceCategory = @defaultSourceCategory
ENDIF
  
SET @defaultSource = Lookup(@cxConfigDE,"parameterValue","parameterContext",@accountId,"parameterName","defaultSourceEmailUnsub")
IF empty(@source) THEN
 SET @source = @defaultSource
ENDIF

/*SET @defaultPermissionType = Lookup(@cxConfigDE,"parameterValue","parameterContext",@accountId,"parameterName","defaultPermissionEmailunsub")
*/
SET @defaultLocale = Lookup(@cxConfigDE,"parameterValue","parameterContext",@accountId,"parameterName","defaultLocale")
IF empty(@locale) THEN
  SET @locale = @defaultLocale
ENDIF

IF empty(@permissionType) or empty(@locationForSuppressions) THEN
 SET @skipProcessing = true
 SET @statusmessage = "unsubError"
 SET @errorPage = @genericErrorPage
ELSE
 /* define thankyou and error page */
 SET @thankYouPage = Lookup(@cxSwitcherDE,"textContent","businessUnit",@accountId,"context",@locale,"textClass",@permissionType,"textId","unsubThankYouPage")
 SET @errorPage = Lookup(@cxSwitcherDE,"textContent","businessUnit",@accountId,"context",@locale,"textClass",@permissionType,"textId","unsubErrorPage")
ENDIF
/* end define defaults */


/* timezone check */
SET @servertime = NOW()
SET @localtime = SystemDateToLocalDate(Now())
/* perform timezone check to apply german daylight saving time offset;*/
SET @timezoneOffset = DateDiff(@servertime,@localtime, 'H')
/* LOCAL TIME HAS TO BE SENT BY THE ORIGINATING SYSTEM! */

/* start decrypt incoming parameters */
IF NOT EMPTY(@email) AND NOT EMPTY (@subscriberKey) THEN
  SET @email = DecryptSymmetric(@email, 'AES', @pw, @null, @salt, @null, @IV, @null)
  SET @subscriberKey = DecryptSymmetric(@subscriberKey, 'AES', @pw, @null, @salt, @null, @IV, @null)
  SET @sourceCategory = DecryptSymmetric(@sourceCategory, 'AES', @pw, @null, @salt, @null, @IV, @null)
  SET @source = DecryptSymmetric(@source, 'AES', @pw, @null, @salt, @null, @IV, @null)
  SET @debugMessage = "parameters received"
ELSE
  SET @debugMessage = "no parameters received"
ENDIF
/* end decrypt incoming parameters */

/* ensure that test addresses can be excluded from unsubscription processing via cxConfig */
SET @testAddressesAsRowset = LookupRows(@cxConfigDE,"parameterContext","excludeFromUnsub")
SET @rowCount = rowcount(@testAddressesAsRowset)
IF @rowCount > 0 then
  FOR @i = 1 to @rowCount do
    SET @row = row(@testAddressesAsRowset, @i) /* get row based on counter */
    SET @testEmailAddress = field(@row,"parameterValue")
    IF @email == @testEmailAddress THEN
      SET @skipProcessing = true
    ENDIF
  NEXT @i
ENDIF
/* end skip test addresses */

/* start unsub processing */
IF NOT EMPTY(@subscriberKey) and @skipProcessing != true THEN
]%%<script runat="server">
  Platform.Load("Core","1");
  var log = Variable.GetValue("@unsubLogDe");
  var logDE = DataExtension.Init(log);
  try {
  </script>%%[
    /* logunsubEvent */
    /* Execution Request initiieren. */
    SET @obj = CreateObject("ExecuteRequest")
    /* API Property generieren und Subscriber Key als Name-Value paar hinzufügen. */
    SetObjectProperty(@obj,"Name","LogUnsubEvent")
    SET @obj_prop = CreateObject("APIProperty")
    SetObjectProperty(@obj_prop, "Name", "SubscriberKey")
    SetObjectProperty(@obj_prop, "Value", @subscriberKey)
    AddObjectArrayItem(@obj, "Parameters", @obj_prop)
    /* child context herstellen anhand der accountId (=MID). */
    SET @obj_prop = CreateObject("ClientID")
    SetObjectProperty(@obj_prop, "ID", @accountId)
    SetObjectProperty(@obj_prop, "IDSpecified", "true")
    SetObjectProperty(@obj, "Client", @obj_prop)
    /* JobiD als Name-Value paar hinzufügen. */
    SET @obj_prop = CreateObject("APIProperty")
    SetObjectProperty(@obj_prop, "Name", "JobID")
    SetObjectProperty(@obj_prop, "Value", @jobId)
    AddObjectArrayItem(@obj, "Parameters", @obj_prop)
    /*Unsubscribe Reason als Name-Value paar hinzufügen.*/
    /*SET @obj_prop = CreateObject("APIProperty")
    SetObjectProperty(@obj_prop, "Name", "Reason")
    SetObjectProperty(@obj_prop, "Value", @jobId)
    AddObjectArrayItem(@obj, "Parameters", @obj_prop)*/

    /* intiate optout */
    IF @environment != "test" THEN
     SET @obj_statusCode = InvokeExecute(@obj)
     SET @response = Row(@obj_statusCode, 1)
     SET @status = Field(@response,"StatusMessage")
     SET @error = Field(@response,"ErrorCode")
    ENDIF

    /* Log the event in the subscription archive data extension */
    IF @environment != "test" THEN
     InsertData(@subscriptionArchiveDE
       ,"rowkey",GUID()
       ,"subscriberKey",@subscriberKey
       ,"sourceCategory",@sourceCategory
       ,"source",@source
       ,"permissionType",@permissionType
       ,"channel",@channel
       ,"unsubDate",NOW()
       ,"timezoneOffsetUnsubDate",@timezoneOffset
       ,"lastChangeDateServertime",NOW()
       ,"accountId",@accountId
       ,"locale",@locale
       ,"jobId",@jobId
       ,"listId",@listId
       ,"batchId",@batchId
     )
    ENDIF
    /* client specific processing:
    perform client specific upserts and changes related to unsubscription */
    SET @utcDate = DateAdd(NOW(), 6, "h")
    
    /* upsert in permissions data extension */
    IF @environment != "test" THEN
     set @debugPermissionUpsert = UpsertData(@permissionsDE,3,"subscriberKey",@subscriberKey,"permissionType",@permissionType,"channel",@channel
      ,"state","inactive"
      ,"revokedLastTimestampUTC",@utcDate
      ,"revokedLastSourceCategory",@sourceCategory
      ,"revokedLastSource",@source
     )
    ENDIF

    /* upsert in suppression list based on permission */
    IF @environment != "test" THEN
     set @debugAutoSubUpsert = UpsertData(@locationForSuppressions,1,'Email Address',@email
      ,'Date Added',Now()
      ,'subscriberKey',@subscriberKey
      ,'sourceCategory',@sourceCategory
      ,'source',@source
      ,'timezoneOffset',@timezoneOffset
     )
    ENDIF

 IF @environment != "test" THEN
    SET @additionalBusinessProcessing = Lookup(@cxSwitcherDE,"textContent","businessUnit",@accountId,"context",@locale,"textClass",@permissionType,"textId","unsubConfirmationProcessing")
     IF not empty(@additionalBusinessProcessing) THEN
       ]%%%%=ContentBlockByKey(@additionalBusinessProcessing)=%%%%[
     ENDIF
   ENDIF /* test wrapper */
/* end client specific processing */
]%%<script runat="server">
    } catch(e) {
      Variable.SetValue("@statusmessage","unsubError");
      logDE.Rows.Add({errormsg: Stringify(e)});
    }</script>%%[
ENDIF


IF @statusmessage != "unsubError" THEN
    Redirect(@thankYouPage)
  ELSE
    Redirect(@errorPage)
  ENDIF
ELSE
  Redirect(@errorPage)
ENDIF


]%%

unsubLogDe: %%=v(@unsubLogDe)=%%
<br>debugMessage: %%=v(@debugMessage)=%%
<br>statusmessage: %%=v(@statusmessage)=%%
<br>logUnsubStatus: %%=v(@status)=%%
<br>debugPermissionUpsert: %%=v(@debugPermissionUpsert)=%%
<br>debugAutoSubUpsert: %%=v(@debugAutoSubUpsert)=%%
<br>additionalBusinessProcessing: %%=v(@additionalBusinessProcessing)=%%